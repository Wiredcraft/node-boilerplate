var express = require('express');
var _ = require('underscore');
var carcass = require('carcass');

// Server is ...
// Servers can start and stop, and mount some resources.
module.exports = Server;

// .
function Server(attributes, options) {
    this.app = express();
    this.mounted = {};
    this.initialize.apply(this, arguments);
};

// Initialize is an empty function by default. Override it with your own
// initialization logic.
Server.prototype.initialize = function() {};

// .
Server.prototype.mount = function(name, route) {
    var self = this;
    var resources = carcass.resources || null;
    if (resources && resources[name]) {
        route || (route = '/');
        // Don't mount a same resource to a same route multiple times.
        self.mounted[route] || (self.mounted[route] = {});
        if (!self.mounted[route][name]) {
            var resource = new resources[name]();
            // Handle dependencies.
            _.each(resource.dependencies || null, function(name, route) {
                self.mount(name, route);
            });
            self.mounted[route][name] = true;
            resource.mountTo(self, route);
        }
    }
    return this;
};

// .
Server.prototype.mountAll = function() {
    var self = this;
    _.each(carcass.resources || null, function(Res, name) {
        console.log(1, name);
        self.mount(name);
    });
    return this;
};

// The use method can also use a resource in addition to a function or an
// Express application.
Server.prototype.use = function(route, resource) {
    if ('string' != typeof route) resource = route, route = '/';
    var handler;
    if (resource.app && resource.app.handle && resource.app.set) {
        handler = resource.app;
    } else {
        // TODO: further checking?
        handler = resource;
    }
    return this.app && this.app.use(route, handler);
};
